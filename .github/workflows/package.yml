name: Build PyInstaller Release

permissions:
  contents: write
  id-token: write

on:
  push:
    branches: [main]
    tags: ['v*']

  release:
    types: [published]

  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV CLI and project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv sync

      - name: Install UPX on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y upx

      - name: Install UPX on macOS
        if: matrix.os == 'macos-latest'
        run: brew install upx

      - name: Build with PyInstaller via UV
        shell: bash
        run: |
           uv run pyinstaller \
            --noconfirm \
            --windowed \
            --onefile \
            --collect-all requests \
            --collect-all beautifulsoup4 \
            --collect-all openai \
            --collect-all ollama \
            --collect-all groq \
            --collect-all pynput \
            --collect-all Pillow \
            --collect-all python-dotenv \
            --collect-all pystray \
            --collect-all pdfplumber \
            --collect-all plyer \
            --collect-all crawl4ai \
            --collect-all reportlab \
            --collect-all markdown2 \
            --collect-all fpdf \
            --collect-all fastapi \
            --collect-all uvicorn \
            --collect-all PySide6 \
            --collect-all PyQt6 \
            --collect-all opentelemetry-api \
            --collect-all opentelemetry-sdk \
            --collect-all opentelemetry-instrumentation \
            --collect-all opentelemetry-exporter-otlp \
            --collect-all pyperclip \
            --collect-all markitdown[all] \
            --collect-all python-json-logger \
            --collect-all sentence-transformers \
            --collect-all torch \
            --collect-all numpy \
            --collect-all matplotlib \
            --collect-all langdetect \
            --collect-all markdownify \
            --collect-all scikit-learn \
            --collect-all joblib \
            --collect-all pandas \
            --collect-all scipy \
            --collect-all pyzmq \
            --collect-all emoji \
            --collect-all nltk \
            --collect-all markdown \
            src/jobops/__init__.py \
            --name jobops \
            --strip

      - name: Rename output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Listing contents of dist directory:"
          Get-ChildItem -Path "dist" -Recurse
          if (Test-Path -Path "dist\jobops.exe") {
            Move-Item -Path "dist\jobops.exe" -Destination "dist\jobops-windows.exe"
          } else {
            Write-Error "File not found: dist\jobops.exe"
          }

      - name: Rename output (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv dist/jobops dist/jobops-linux

      - name: Rename output (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mv dist/jobops dist/jobops-macos

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jobops-${{ matrix.os }}
          path: dist/jobops-*
      - name: Create Git tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          DATE=$(date +'%Y.%m.%d')
          git tag v$DATE
          git push origin v$DATE

  publish_release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
    steps:
      - name: Set release tag name
        id: set_tag
        run: |
          DATE=$(date +'%Y.%m.%d')
          echo "TAG_NAME=v${DATE}" >> $GITHUB_ENV

      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: jobops-ubuntu-latest
          path: dist_linux
      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: jobops-windows-latest
          path: dist_windows
      - name: Download macOS build
        uses: actions/download-artifact@v4
        with:
          name: jobops-macos-latest
          path: dist_macos
      - name: Publish to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            dist_linux/jobops-linux
            dist_windows/jobops-windows.exe
            dist_macos/jobops-macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 